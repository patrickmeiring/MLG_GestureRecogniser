#include "MLG_GestureRecogniser.h"
#include <stdlib.h>
#include <math.h>

// Static configuration data.
// Weights for LSTM network recognising 8 gestures.
float parameters[] = { 
  -0.00814935f, -0.019168f, 0.006340094f, -0.01069161f, -1.018622f, -0.1513674f, 0.00829123f, -0.01663769f, -0.3208058f, -0.09509932f, -0.1155826f, 0.156955f, 0.1326202f, -0.1844456f, 0.02105905f, -0.08106156f, -0.05636343f, 0.1422906f, 0.1994754f, 0.02915103f, -0.08824638f, 0.2213472f, 0.1139152f, -0.04991044f, 0.2452768f, -0.1780935f, 0.06646797f, 0.04295368f, 0.09404229f, 0.03871003f, -0.053471f, 0.1326191f, -0.1135888f, 0.05352231f, -0.02122721f, -0.2168436f, 0.07646761f, 0.02665613f, -0.07451631f, -0.2482256f, -0.2459431f, -0.0552355f, -0.1565633f, -0.09089679f, 0.03253528f, -0.211726f, 0.1956562f, 0.04743158f, -0.1304794f, 0.005055873f, 0.1004724f, 0.2896644f, -0.1138928f, 0.07670701f, -0.02237414f, -0.06625362f, -0.04040545f, 0.1739803f, 0.1928348f, 0.2099029f, -0.04602722f, 0.0199818f, 0.0882955f, 0.1582093f, -0.2785869f, -0.2303387f, 0.02015641f, 0.02642629f, -0.1375959f, 0.220718f, -0.1730225f, -0.1633523f, -0.07514732f, -0.08852631f, -0.005487717f, -0.2275337f, 0.6477402f, 0.1265467f, -0.1836058f, 0.1206131f, -0.1847834f, -0.11263f, -0.1756367f, 0.2964412f, -0.04769436f, 0.05728466f, 0.06583147f, 0.3192211f, 0.518701f, 0.02852301f, -0.3082488f, -0.04185721f, 0.02685173f, 0.08406384f, 0.1520469f, 0.06447099f, -0.023311f, 0.05041259f, -0.04701541f, -0.1853887f, 0.1036557f, 0.2528172f, -0.1959195f, -0.1464785f, -0.008251095f, -0.1652441f, 0.3300475f, -0.0009180543f, 0.1860257f, 0.1181524f, 0.02445195f, 0.1757058f, 0.01428561f, 0.02894413f, -0.1379828f, -0.1429609f, -0.1802009f, -0.1255493f, 0.1459762f, -0.1459264f, 0.01566998f, 0.05089265f, -0.03760646f, -0.1120314f, 0.1975962f, -0.2763048f, -0.09774209f, 0.1171164f, -0.3353651f, -0.2342518f, 0.1983801f, 0.07846731f, 0.02447456f, -0.0273959f, -0.02388054f, 0.4721863f, -0.1370889f, -0.02654482f, -0.02787667f, 0.1209769f, 0.08824279f, -0.1459014f, -0.2094847f, -0.31435f, -0.1201206f, 0.06201198f, 0.05747626f, 0.1065884f, -0.07917773f, 0.1543359f, -0.1798101f, 0.1439959f, 0.1065093f, 0.1015295f, -0.2218013f, -0.07501453f, 0.006142919f, -0.03646808f, -0.02848569f, -0.1574892f, -0.2328205f, 0.110381f, -0.07955694f, -0.1954695f, 0.2582714f, -0.1516934f, -0.01268263f, -0.09766614f, 0.001800297f, 0.04007643f, 0.0522248f, -0.4445978f, 0.02935201f, 0.2550293f, 0.06746752f, 0.03751485f, 0.1056886f, 0.1261445f, 0.08692352f, -0.1202888f, 0.06480287f, 0.08956769f, 0.2263544f, 0.01381619f, 0.2735293f, 0.1489935f, -0.1396239f, -0.008258432f, 0.02334409f, 0.03410837f, -0.04007694f, 0.02818477f, -0.01186853f, -0.007376914f, -0.09197065f, 0.1168071f, 0.2956505f, 0.2836641f, 0.1137482f, -0.07887674f, -0.133209f, 0.03387718f, 0.1128131f, -0.2254691f, 0.09131788f, 0.08627425f, 0.1847786f, 0.1552332f, -0.01047798f, -0.158656f, -0.1894415f, 0.1883408f, -0.01600869f, -0.1036406f, -0.06035937f, 0.09754756f, -0.1664704f, -0.01672585f, 0.01866804f, 0.05452416f, -0.1272675f, -0.0210071f, -0.01557449f, -0.1165799f, -0.05406562f, 0.1361377f, 0.1230481f, -0.07543818f, -0.2220453f, -0.04045376f, -0.02102102f, -0.0679018f, 0.03186038f, -0.04121013f, 0.1929242f, 0.01477724f, 0.1371208f, 0.1177065f, 0.06458388f, 0.2489318f, 0.1425838f, 0.1853779f, -0.03647367f, 0.07222968f, -0.02023505f, 0.03053577f, 0.2085762f, -0.1410604f, -0.009809102f, -0.02047228f, 0.1228064f, 0.1629242f, -0.01594152f, -0.01107997f, 0.01974135f, -0.05263276f, -0.03591638f, 0.01287894f, -0.2962992f, -0.2961411f, 0.2585494f, 0.1301864f, -0.2826969f, 0.01943883f, -0.1261664f, 0.2153531f, -0.2215066f, -0.1009916f, -0.1375789f, 0.02430505f, 0.05884346f, -0.006521814f, -0.06938764f, 0.1116017f, 0.004891228f, 0.135188f, -0.2659238f, 0.120851f, -0.1873839f, 0.04294073f, 0.09017154f, 0.03595378f, -0.08939429f, 0.03385255f, -0.04789652f, -0.05581811f, -0.1549805f, -0.1266004f, 0.2515995f, -0.03104507f, 0.06159113f, 0.1946466f, -0.09476207f, 0.1224578f, 0.07741842f, 0.1761918f, -0.07321139f, 0.09768857f, 0.1305515f, -0.1198347f, -0.1303238f, -0.1041785f, -0.1923432f, 0.07157496f, 0.02378365f, 0.09026805f, -0.1052232f, -0.3116846f, -0.1087085f, 0.2522005f, 0.008678211f, -0.1573215f, -0.02729362f, -0.07426327f, 0.0470695f, -0.1720621f, -0.06539074f, -0.03127269f, 0.06844186f, 0.09602741f, -0.196884f, -0.169616f, 0.17789f, -0.1280899f, -0.1493759f, -0.05760344f, -0.1697258f, 0.146807f, 0.05045742f, 0.1672479f, 0.1534672f, 0.03242957f, -0.1032586f, 0.1833483f, -0.06220036f, -0.1910391f, 0.1825999f, -0.03386268f, 0.1504422f, -0.06452734f, 0.04405326f, 0.1257437f, -0.1925983f, 0.003087398f, -0.1249969f, -0.1340705f, -0.1043291f, 0.06503286f, -0.1451808f, -0.1522468f, 0.02154995f, -0.1712261f, 0.1948416f, -0.04346298f, 0.01715057f, 0.09091878f, -0.114097f, 0.001477362f, -0.08501577f, 0.015012f, -0.3835303f, -0.04116895f, -0.0428118f, -0.150557f, -0.08575082f, 0.02837221f, 0.06974815f, -0.1190185f, -0.262966f, 0.1559251f, 0.1974387f, 0.2136529f, 0.1229042f, 0.02963421f, -0.1446119f, -0.1621334f, 0.09230459f, 0.06662614f, -0.109218f, 0.04200737f, -0.02339953f, 0.1857633f, -0.04578344f, 0.1664972f, -0.1673552f, -0.05978304f, -0.01639824f, 0.02238787f, 0.2165236f, 0.0885547f, 0.1004668f, -0.07941344f, 0.1267962f, 0.1071759f, -0.04735465f, 0.1126389f, 0.006045674f, -0.09945209f, 0.05738117f, -0.1556305f, 0.1261956f, -0.008801184f, -0.05652236f, 0.01068175f, 0.06152771f, 0.1280618f, 0.03878354f, 0.07587312f, 0.09359074f, 0.1247661f, 0.05174047f, -0.06261079f, 0.03997621f, 0.02687288f, -0.1344016f, 0.2522223f, -0.2108901f, -0.1124543f, 0.2063541f, 0.1456155f, 0.09928652f, 0.2080019f, -0.2817033f, -0.2784377f, -0.04597624f, -0.01926126f, 0.006784268f, 0.1871553f, -0.2609684f, 0.04876045f, -0.1332777f, 0.02952691f, 0.06514364f, -0.04282448f, -0.09173631f, 0.2578321f, -0.2156511f, 0.2035617f, 0.27001f, 0.03097256f, -0.07636819f, -0.09174981f, -0.107982f, 0.04917939f, 0.06082613f, 0.07992132f, 0.2728599f, 0.1711339f, 0.08317913f, 0.004340139f, -0.07130638f, -0.1208411f, 0.1208171f, 0.1374067f, 0.07757164f, -0.1385669f, 0.3787639f, 0.4208434f, -0.04399864f, 0.1102839f, -0.1877894f, 0.2387497f, 0.1318576f, 0.3404313f, 0.06170505f, 0.01628148f, -0.01843523f, 0.1576134f, -0.01882529f, -0.08127146f, -0.1474702f, -0.1467798f, 0.08412073f, 0.1765582f, 0.07206025f, 0.1757137f, 0.00169284f, 0.3768558f, -0.1479168f, -0.04843242f, 0.0338425f, 0.1623469f, 0.1106579f, -0.1042123f, 0.03079099f, 0.2400883f, -0.0343109f, 0.1056224f, 0.05673221f, -0.1410339f, 0.159848f, -0.2141137f, 0.2261349f, 0.1236705f, 0.08608144f, -0.05779788f, -0.2152707f, -0.02117638f, 0.04182446f, 0.02668237f, -0.1779052f, 0.149547f, 0.03200278f, -0.1276951f, -0.09899365f, -0.08004177f, 0.05424996f, -0.138608f, 0.1079424f, -0.1832326f, -0.1236173f, 0.09579822f, 0.08564624f, -0.1522996f, -0.05244494f, 0.168544f, -0.1948463f, 0.1832103f, -0.0602727f, -0.1129981f, 0.0822841f, 0.1878519f, -0.001714344f, -0.09928571f, -0.1636232f, -0.005526339f, -0.1545389f, -0.07948636f, -0.06234689f, 0.1861211f, 0.06523445f, 0.181476f, -0.05493208f, 0.1227961f, 0.08492596f, -0.2202802f, 0.301072f, 0.1037857f, 0.04517035f, -0.1239678f, 0.1986004f, -0.007624743f, -0.04808292f, -0.3737875f, 0.005907387f, 0.08785983f, -0.003334723f, -0.1739139f, -0.1945204f, -0.1168305f, -0.2359449f, -0.1066949f, 0.09804488f, -0.1148954f, 0.07801159f, 0.0866954f, 0.221405f, -0.06527019f, 0.09944234f, -0.369044f, 0.1807373f, -0.02211705f, 0.1384433f, 0.2321002f, -0.06891526f, 0.1340486f, 0.2224562f, -0.1491981f, 0.05474667f, -0.03692789f, 0.2587467f, 0.08707741f, 0.00532192f, -0.2531378f, 0.1002074f, -0.0624442f, -0.1173897f, 0.01117652f, 0.1457826f, 0.1086058f, -0.01107697f, 0.1782714f, -0.05882697f, -0.1533172f, 0.06386488f, 0.08140637f, -0.1477542f, -0.1170994f, -0.04045513f, 0.008888367f, -0.05902347f, -0.1620469f, -0.1498885f, -0.1568222f, -0.1928279f, -0.1735917f, 0.02926059f, 0.05299154f, 0.07420728f, 0.1024073f, 0.3537228f, 0.1314024f, -0.2263748f, -0.1599662f, -0.09711883f, -0.07328565f, 0.05880298f, -0.2377846f, 0.2054797f, 0.04612214f, -0.1422286f, 0.04337355f, 0.09743404f, 0.1809261f, 0.03072136f, 0.153393f, 0.01100496f, -0.1919993f, -0.1131878f, -0.1167106f, 0.0008635297f, 0.1106266f, -0.04773585f, -0.08203317f, 0.3107344f, -0.1161129f, -0.1171888f, -0.07185498f, -0.06457864f, -0.1554169f, 0.06303091f, 0.2302685f, 0.09260783f, 0.1220522f, 0.06608974f, -0.02902059f, -0.1730529f, 0.09931569f, -0.07980584f, -0.06001911f, -0.01228201f, 0.0001477538f, 0.1354832f, 0.03505033f, 0.1750279f, -0.07369673f, 0.1510623f, -0.200372f, -0.1902793f, 0.1726824f, 0.04559746f, -0.195372f, -0.1511255f, 0.09034541f, -0.05518039f, 0.08851136f, 0.1281001f, -0.01089528f, -0.08666857f, -0.09508986f, -0.1051372f, 0.1601968f, -0.1647367f, 0.03128475f, 0.1743319f, 0.1483072f, 0.08786481f, -0.06356846f, 0.08574536f, 0.01684175f, -0.210129f, 0.1785136f, 0.107233f, 0.02039738f, -0.05123964f, -0.08224469f, 0.08342178f, -0.1222483f, 0.234352f, 0.000396663f, -0.03491699f, -0.1087383f, -0.1263978f, -0.05123802f, 0.09385341f, -0.2785257f, 0.03749311f, -0.2358333f, 0.06132468f, -0.03787604f, -0.129931f, 0.09009194f, -0.1442354f, -0.093302f, 0.1095544f, -0.1742197f, -0.1143719f, 0.1422622f, -0.1802863f, 0.03193308f, -0.05371633f, 0.04167028f, 0.1158218f, 0.04258164f, -0.1818229f, -0.2027248f, -0.1691574f, 0.03982215f, -0.1189319f, 0.02558337f, -0.09447523f, -0.04120795f, 0.1807872f, 0.1943966f, 0.1283095f, -0.02021428f, 0.06924389f, 0.1662062f, 0.07694626f, -0.00630386f, 0.2134553f, 0.1923761f, 0.04420718f, 0.06527268f, 0.06013063f, -0.1441911f, 0.1456262f, 0.1698281f, 0.09251249f, -0.04006036f, 0.03957794f, -0.1182143f, 0.01801575f, 0.1425023f, 0.03692112f, 0.1474207f, -0.01835137f, 0.1384489f, -0.1272061f, -0.1465336f, -0.05654074f, -0.09602546f, 0.1177244f, -0.08158581f, 0.1178914f, -0.06743056f, 0.1698686f, 0.155619f, -0.003390406f, 0.2206462f, -0.1315991f, 0.02932828f, 0.09964255f, 0.00546965f, 0.04040868f, -0.04887543f, -0.0892378f, -0.1045908f, 0.01865764f, -0.09560702f, -0.1671443f, -0.02144091f, -0.211485f, -0.0118492f, 0.1720079f, -0.1319315f, -0.1562972f, 0.01897548f, 0.1883105f, 0.0006305703f, -0.1029366f, -0.1240567f, 0.01250718f, 0.1227951f, 0.0085651f, 0.1777849f, 0.1919866f, -0.1801515f, -0.009299522f, -0.08913658f, 0.05261557f, 0.1853445f, -0.2349668f, -0.08664925f, 0.1129856f, -0.1278434f, -0.06488258f, 0.1952847f, 0.1174418f, 0.1823361f, 0.1631551f, 0.1012033f, -0.2979421f, -0.05336497f, 0.02061642f, -0.1386933f, 0.1372175f, 0.02361137f, -0.301423f, -0.4457524f, 0.09872141f, 0.1411302f, 0.05934918f, 0.04706325f, 0.1793494f, 0.1824858f, -0.2587542f, 0.09521025f, -0.2006128f, -0.1547449f, 0.2158743f, 0.02703989f, -0.05026641f, 0.2345265f, 0.02969254f, -0.001363955f, 0.135755f, -0.1246243f, -0.1809333f, -0.1792166f, 0.1360071f, 0.06390831f, -0.1605744f, 0.02161762f, -0.1617372f, 0.1789558f, -0.2222599f, -0.05672755f, -0.1239425f, 0.1445931f, 0.137864f, -0.04651014f, -0.1609727f, -0.04185894f, 0.09359652f, 0.1206376f, 0.01106049f, 0.08899093f, -0.1766832f, 0.03473967f, -0.0783503f, -0.09653462f, -0.1518899f, -0.09132846f, -0.04130586f, -0.1411435f, -0.06699928f, 0.005367579f, 0.125655f, -0.1059158f, -0.1316536f, 0.00590618f, 0.127257f, 0.1147402f, 0.1697074f, -0.1647759f, -0.02546827f, -0.1455085f, -0.01401198f, -0.09073218f, -0.176945f, -0.1369299f, -0.0619965f, -0.1106288f, 0.1456033f, 0.1180844f, 0.09079816f, 0.04123336f, -0.1040918f, 0.005644666f, 0.186848f, 0.06877902f, 0.1933303f, -0.09154376f, -0.1350616f, -0.0566251f, 0.04034539f, -0.0422649f, 0.1634006f, -0.1830111f, 0.1296096f, 0.2134192f, 0.07492062f, -0.07159731f, 0.1390702f, 0.1642988f, 0.2052504f, -0.1798973f, -0.07021871f, -0.0230485f, -0.07080273f, -0.2508531f, 0.5932249f, 0.1437666f, -0.03903565f, -0.3342782f, -0.2290848f, 0.1036837f, 0.02057752f, 0.01208742f, -0.03905421f, 0.1906949f, -0.1998725f, -0.1456038f, -0.0104736f, 0.1066976f, 0.02833506f, 0.2047372f, 0.1154637f, -0.01106649f, -0.05704177f, -0.1693668f, -0.06983946f, 0.2315157f, -0.2004899f, -0.02753288f, -0.08350295f, -0.05305773f, 0.1450968f, 0.02397692f, 0.1209141f, 0.1327216f, 0.05659508f, 0.06074454f, 0.02436099f, -0.0335635f, -0.2311419f, -0.05122844f, -0.2581331f, 0.1308108f, 0.003889218f, -0.01882982f, 0.1563539f, 0.119372f, -0.1465913f, 0.09805408f, -0.06689887f, 0.1433543f, -0.3214474f, -0.01012924f, 0.01737763f, 0.1671499f, 0.0380038f, 0.1558251f, -0.09367861f, -0.1208568f, -0.02918451f, 0.1920628f, -0.01892945f, 0.06221799f, -0.09394292f, 0.07193974f, -0.09789043f, -0.2248372f, 0.01210207f, 0.1349522f, 0.1481027f, -0.01962506f, 0.09635366f, 0.09526452f, -0.079431f, -0.07978994f, -0.03425336f, -0.1050505f, 0.04751455f, -0.1154006f, 0.04069345f, -0.108906f, -0.13945f, -0.08435898f, 0.08335406f, 0.3587768f, 0.0727908f, -0.01275221f, 0.06812254f, -0.1884488f, -0.4342094f, 0.1067945f, -0.08985369f, -0.1053017f, -0.0341812f, -0.1364305f, -0.1288182f, 0.2570285f, -0.05516876f, -0.1077525f, -0.05879523f, -0.08115234f, -0.2416106f, -0.05241403f, 0.07582561f, -0.0859435f, -0.1129044f, -0.007036661f, -0.01335473f, 0.1239799f, -0.2622886f, -0.1067003f, -0.1023896f, -0.01298815f, -0.1408216f, -0.08108691f, -0.03627043f, 0.06766464f, 0.1409179f, 0.09102542f, 0.03493641f, -0.003668928f, -0.07948286f, -0.1373435f, -0.07801867f, -0.08507024f, 0.1297807f, -0.168152f, -0.02443053f, -0.1677241f, -0.06197309f, -0.07937266f, 0.2228139f, 0.1812147f, 0.04122123f, -0.01891401f, -0.009786167f, 0.05264227f, 0.3436716f, 0.2846184f, 0.03012533f, -0.05617771f, 0.1232124f, -0.1943717f, -0.05643664f, 0.0447487f, 0.107656f, -0.01292167f, 0.09409463f, -0.2373593f, 0.1188499f, -0.07077776f, -0.06024191f, -0.01031873f, -0.1927017f, 0.2138662f, -0.1741515f, 0.171353f, 0.01452495f, 0.02648551f, 0.03765269f, -0.03038719f, -0.0128363f, -0.1838686f, -0.1990527f, 0.1938678f, -0.1881165f, 0.009419014f, 0.001144971f, 0.1932489f, -0.1220006f, 0.000153578f, 0.1692602f, -0.03506001f, 0.09432912f, 0.08978001f, -0.1125575f, -0.06846981f, 0.09972379f, -0.1821413f, -0.285462f, 0.2202347f, -0.2377498f, 0.02503173f, -0.02913398f, -0.1061914f, 0.132647f, 0.08388314f, 0.1176987f, 0.1562028f, 0.16596f, -0.07288032f, 0.03109277f, 0.06289636f, -0.2970596f, -0.05836423f, 0.006732148f, 0.1806734f, -0.1192996f, 0.06043059f, -0.200965f, 0.09521519f, -0.1168794f, -0.0003280002f, 0.01422911f, 0.3390864f, 0.05733214f, 0.1197844f, 0.2644839f, -0.1432468f, 0.004290946f, -0.1057943f, 0.1924038f, 0.01538853f, -0.09002557f, 0.1409419f, -0.1621498f, -0.05246727f, 0.1240083f, -0.1020113f, -0.2310637f, -0.118572f, 0.1105817f, 0.01664392f, -0.05949659f, -0.06951985f, -0.01826f, -0.1505839f, -0.1305214f, 0.02478101f, -0.02862266f, -0.01988697f, -0.03779205f, 0.1630571f, -0.02793535f, 0.1446115f, 0.01648382f, 0.1666857f, 0.09947558f, -0.004153171f, -0.02961142f, 0.07819071f, 0.2860905f, -0.01102535f, 0.04473542f, -0.1901068f, -0.004433909f, 0.005164005f, -0.07437354f, 0.04310813f, 0.164929f, -0.005467601f, 0.1913495f, 0.1109389f, -0.06359169f, 0.09559602f, -0.07302042f, -0.03643194f, 0.3197455f, 0.1364438f, -0.02942027f, 0.2063566f, 0.1342977f, 0.03986485f, 0.0498719f, 0.122377f, -0.2175318f, 0.08612735f, -0.2204197f, 0.1095205f, 0.07085209f, -0.05824168f, -0.05298869f, -0.001486467f, -0.08054397f, 0.1194174f, 0.1697103f, 0.01099902f, -0.01957986f, -0.03881255f, -0.1701548f, -0.1321271f, 0.1764884f, -0.01690556f, 0.1734947f, 0.09623219f, -0.09018587f, -0.01764773f, 0.06724489f, -0.1441165f, 0.2112482f, -0.06657711f, 0.0894013f, -0.03740953f, -0.04603602f, -0.2323199f, 0.01779039f, 0.1907298f, -0.05524104f, -0.1598864f, -0.158927f, -0.1068126f, -0.005890545f, 0.1360552f, 0.366674f, -0.03734415f, -0.09868184f, 0.1534419f, -0.2889083f, -0.1356869f, 0.2029828f, -0.1289569f, -0.01130665f, 0.05908146f, -0.02056468f, -0.004865826f, 0.1886045f, 0.138605f, -0.01135168f, -0.05847274f, -0.05671551f, -0.01800505f, 0.05225288f, -0.1284743f, -0.08075671f, -0.1074004f, -0.0003485132f, -0.07407877f, 0.1852642f, 0.01610058f, -0.08948012f, 0.08916178f, -0.05716216f, -0.1485897f, -0.1220812f, 0.08910139f, -0.08055951f, 0.1506508f, 0.1775418f, -0.07068332f, 0.05731806f, 0.1113907f, 0.164857f, -0.03629978f, -0.054478f, -0.006118904f, 0.01021286f, -0.1783236f, 0.007346626f, -0.1933008f, 0.07961559f, -0.1100634f, 0.1359333f, -0.03314785f, -0.1303366f, 0.09333443f, 0.01589326f, -0.09358223f, -0.02466273f, 0.07129054f, -0.136935f, -0.09442026f, -0.01857934f, 0.1057824f, -0.05483159f, 0.07116591f, -0.0102829f, -0.03378405f, -0.0977625f, 0.2728515f, -0.1910371f, 0.05371711f, 0.1615769f, -0.2395103f, 0.02082922f, -0.2189833f, -0.02193369f, -0.1899344f, 0.04756422f, -0.1860454f, -0.07657379f, -0.09470369f, 0.1365339f, 0.01407504f, 0.008172478f, -0.1861602f, -0.01995095f, -0.188302f, -0.04079825f, 0.1595845f, 0.1865939f, -0.1077169f, -0.0339696f, 0.005865361f, 0.002800926f, -0.1683606f, 0.09126612f, -0.09992326f, -0.09465589f, 0.1685687f, -0.07333347f, 0.1637132f, -0.1361745f, -0.08639508f, -0.04782159f, 0.2044118f, 0.04064739f, -0.1173403f, 0.1135308f, -0.04282919f, 0.1084086f, 0.01926319f, 0.1217628f, -0.2194141f, -0.09034843f, -0.1921965f, 0.1437699f, 0.1581556f, 0.1168633f, 0.005033168f, 0.1355845f, 0.1755778f, 0.0783649f, 0.1545715f, -0.08139902f, 0.07265097f, -0.1049254f, 0.1113741f, -0.138922f, -0.04263329f, -0.1440632f, -0.1810559f, -0.1916249f, -0.06975703f, -0.008684502f, -0.1669415f, 0.05874532f, 0.1481961f, 0.1104654f, 0.03747006f, 0.1570408f, -0.06806444f, 0.1756082f, 0.07187462f, -0.1776705f, -0.1145988f, 0.161738f, -0.0344356f, 0.1791474f, 0.1149177f, 5.117297E-05f, -0.07190743f, -0.04745955f, 0.1362106f, -0.1287558f, 0.04879123f, 0.1537695f, 0.1932762f, -0.2055123f, 0.04405544f, -0.0200799f, 0.06498455f, 0.2021813f, -0.1616121f, -0.0003732291f, -0.1314218f, -0.1018687f, -0.07170819f, -0.1355698f, 0.1249728f, -0.1469428f, -0.1761823f, -0.1129454f, 0.2654119f, 0.08794557f, 0.02556998f, 0.1827959f, 0.2558751f, -0.04721915f, 0.3170381f, -0.0831988f, 0.1700941f, -0.007026194f, 0.1137623f, -0.001176104f, -0.02862063f, -0.08319595f, -0.1830659f, -0.01337864f, -0.1709165f, -0.1811938f, -0.1290817f, -0.08208907f, -0.1266543f, 0.06418741f, 0.0535325f, -0.117434f, -0.01973706f, 0.09782608f, 0.005113034f, -0.04832669f, 0.1393039f, 0.0736549f, -0.1482477f, -0.03910827f, -0.1710846f, -0.175562f, 0.1828993f, -0.1046517f, -0.1181178f, 0.01113912f, -0.06211754f, -0.0009348989f, -0.04061424f, -0.0262896f, -0.1916772f, -0.07075064f, 0.05593726f, 0.07777864f, 0.1690108f, 0.08595186f, -0.05564443f, -0.03098056f, -0.02513287f, -0.1158976f, 0.06608109f, 0.08723169f, 0.1691547f, -0.01451366f, 0.1486997f, -0.09965689f, -0.08684725f, -0.1829231f, -0.1334157f, -0.02664821f, -0.2188959f, -0.04699016f, 0.0074287f, 0.06275351f, 0.004647524f, 0.1941754f, -0.1227404f, 0.005531514f, 0.06055294f, 0.1022539f, -0.08503512f, 0.1895464f, -0.2095616f, 0.1606808f, 0.2081549f, -0.1576405f, -0.1721365f, 0.1080976f, -0.01213961f, -0.2226847f, -0.06765266f, 0.1745767f, -0.06203294f, -0.005323832f, 0.05272885f, 0.009821668f, 0.2766425f, 0.2069213f, 0.05984699f, -0.02319338f, 0.05986454f, -0.04342567f, 0.1049517f, 0.06917074f, 0.2211516f, 0.1651233f, 0.09301661f, -0.03134475f, 0.1773372f, -0.1569563f, 0.2236817f, 0.130248f, 0.1960832f, 0.04439033f, 0.1478866f, -0.1280789f, 0.1205441f, 0.1633303f, -0.1322266f, 0.1906572f, 0.1511901f, -0.09136684f, -0.1463168f, 0.04819455f, -0.181507f, 0.05493911f, -0.1242568f, -0.01405465f, 0.1851101f, -0.07870095f, 0.06485401f, -0.02664942f, -0.1190235f, 0.1022007f, 0.1633204f, 0.008158547f, -0.1360335f, 0.07259875f, 0.05233475f, 0.08437461f, -0.03233103f, -0.1213501f, 0.05032037f, 0.1676672f, -0.08663068f, -0.1756741f, -0.09002526f, 0.01689386f, 0.1139271f, -0.2020523f, 0.08861694f, 0.08931877f, -0.1907633f, 0.213362f, -0.1553075f, 0.06646492f, -0.1891443f, -0.08600218f, 0.1146971f, -0.05816307f, -0.08678871f, -0.03992312f, 0.07102691f, -0.1079348f, -0.07377927f, 0.02972917f, 0.1141228f, -0.1104067f, -0.08430821f, -0.1256252f, 0.09792268f, 0.2071024f, -0.05178514f, 0.09433299f, 0.02578613f, -0.2209413f, 0.04683758f, -0.1111435f, 0.0997339f, -0.006366757f, -0.07002462f, 0.1639501f, -0.05208196f, -0.1420796f, 0.1836464f, 0.0620217f, -0.1731822f, 0.1518888f, -0.1282987f, -0.003237647f, -0.1815607f, -0.1465906f, -0.1049561f, 0.1211943f, -0.06494142f, 0.0004999253f, 0.003704177f, -0.0138709f, 0.0007340258f, 0.1280966f, -0.1731318f, -0.08360083f, -0.06114977f, 0.1984364f, -0.0007478475f, 0.1988421f, 0.06612792f, -0.01571456f, 0.1670904f, 0.07324602f, 0.1738218f, 0.1277539f, -0.1315211f, -0.02477043f, -0.04142582f, 0.1353237f, -0.01111526f, -0.138003f, -0.01950077f, 0.07868011f, 0.1577363f, -0.177946f, 0.06353469f, -0.1117213f, 0.1911944f, 0.1649302f, 0.1273204f, -0.140168f, -0.1356789f, -0.02601818f, -0.0169563f, -0.1262676f, -0.1316138f, 0.1536981f, 0.1081036f, -0.06052009f, 0.1043158f, -0.05766197f, 0.0200084f, -0.180004f, 0.01881881f, -0.1306192f, -0.04066418f, -0.05172559f, -0.02728972f, -0.1876931f, -0.1597881f, -0.007095473f, -0.05367303f, 0.1197973f, -0.004962228f, -0.0358857f, -0.1302774f, 0.161089f, 0.006013345f, -0.02443968f, 0.1591198f, -0.1889794f, -0.06034349f, 0.02681909f, 0.1140563f, -0.02754545f, 0.08619463f, -0.02676926f, -0.1654633f, 0.008428977f, 0.1773338f, 0.1021191f, -0.03644512f, -0.1681146f, -0.1312021f, 0.1799044f, 0.07343956f, -0.01316032f, -0.1265158f, -0.09432655f, -0.06977859f, 0.02667884f, -0.1287272f, 0.2014439f, -0.03252835f, 0.05555826f, 0.1080914f, 0.1274579f, 0.08426084f, -0.2269957f, -0.1128451f, -0.02373627f, 0.03801921f, 0.03528818f, -0.05185663f, -0.06191866f, 0.1097197f, -0.1909076f, -0.05466605f, -0.01184781f, 0.02366574f, -0.1729393f, 0.05424664f, 0.09053693f, -0.02453551f, 0.1019625f, 0.03775267f, 0.1347416f, 0.01447816f, -0.03371786f, 0.1032896f, -0.03233835f, -0.00494217f, -0.007872993f, -0.1852286f, -0.1431895f, -0.1495995f, -0.02734488f, 0.166142f, -0.009852264f, -0.06421556f, -0.1412521f, -0.1104325f, -0.01211075f, -0.1977315f, 0.01060692f, -0.1123814f, 0.189097f, -0.1069793f, -0.001401059f, 0.1903207f, -0.114456f, -0.1081282f, -0.09169064f, -0.03186819f, -0.1454194f, 0.03578335f, -0.08969674f, 0.08226381f, -0.1089672f, -0.06324951f, -0.1105483f, -0.1907398f, -0.1324347f, -0.04265199f, -0.1384228f, -0.2160664f, 0.132323f, 0.09010477f, -0.1591084f, 0.1376307f, 0.0625644f, -0.06048121f, 0.06052976f, -0.1124152f, -0.1822653f, 0.02530777f, 0.151994f, -0.1728795f, 0.08152153f, 0.1484846f, -0.1907495f, -0.09374119f, -0.0741411f, -0.1309936f, -0.06792707f, 0.179146f, 0.05387758f, 0.02287845f, -0.0698484f, 0.1145325f, -0.09468976f, -0.1778735f, 0.1594936f, 0.1589456f, 0.06542628f, 0.2131961f, 0.1222347f, 0.06436531f, -0.1629155f, -0.1105403f, 0.06477271f, -0.1286721f, -0.1288156f, -0.05909415f, -0.03838992f, -0.184264f, 0.1415293f, 0.005843205f, -0.1146328f, -0.02935958f, 0.124659f, -0.1595707f, 0.1962597f, 0.1798341f, -0.06813142f, 0.1508508f, -0.1950138f, -0.1667095f, 0.1377349f, -0.07755128f, 0.1961519f, 0.1226287f, -0.01915428f, -0.1886672f, 0.01699573f, 0.09362461f, -0.008413908f, 0.1743923f, -0.06820425f, 0.1067937f, 0.05594735f, -0.1479464f, -0.08065695f, 0.02618301f, 0.1117736f, 0.03865372f, 0.1679799f, 0.3174391f, -0.07539114f, -0.253833f, -0.02226048f, 0.1201572f, 0.08916311f, -0.02497625f, 0.1550623f, -0.04243011f, -0.01169391f, 0.1191219f, -0.01386789f, -0.1715407f, 0.08724384f, -0.07358101f, 0.06295662f, 0.03754456f, -0.08954222f, 0.1931122f, 0.08383753f, -0.1025316f, 0.09641201f, 0.07184917f, 0.2013018f, -0.03989596f, 0.1150125f, -0.1227108f, -0.09394673f, -0.09719234f, 0.04645751f, 0.04970851f, 0.02495989f, -0.1564745f, 0.1897901f, -0.01785985f, -0.02670312f, 0.03848914f, 0.02452037f, 0.124384f, -0.1043258f, -0.1160305f, 0.08796886f, 0.07449581f, -0.1095971f, 0.2107865f, 0.05242031f, 0.04771093f, -0.06305422f, 0.1228876f, -0.1806598f, -0.0488736f, 0.2514895f, -0.2077614f, -0.1343554f, -0.02290531f, 0.1653659f, -0.1618839f, 0.07617457f, 0.1193072f, -0.04259285f, -0.004011826f, -0.1835731f, 0.1333048f, -0.2155927f, -0.1181749f, -0.04229406f, -0.1297779f, -0.1917565f, -0.1831693f, -0.01758629f, 0.2672878f, -0.0366737f, 0.003918585f, 0.022609f, -0.09101798f, -0.2184802f, -0.2151035f, -0.08469762f, -0.08080825f, 0.1996665f, 0.004204642f, 0.08116983f, 0.1232878f, -0.2594553f, -0.02088796f, 0.07959585f, -0.1061583f, -0.02971067f, 0.172922f, -0.1450543f, -0.0411589f, 0.07666878f, -0.09606982f, -0.1198781f, 0.2168465f, -0.03366157f, 0.004641701f, -0.02198202f, -0.0604291f, -0.02646783f, 0.3521491f, 0.117077f, 0.1058736f, -0.02583855f, 0.09853311f, 0.07657328f, 0.2238831f, -0.009430337f, -0.07025895f, -0.005789666f, -0.2391275f, 0.03859477f, 0.08567771f, -0.1107125f, 0.101916f, 0.1064941f, 0.008293514f, -0.001041133f, -0.005881761f, 0.0007372278f, -0.002684353f, -0.001079948f, 0.2001923f, -0.4101053f, -0.1986807f, -0.3251714f, -0.02308685f, -0.06531725f, -0.1284204f, 0.01830625f, 0.09196952f, 0.1521868f, -0.07873128f, -0.0008282249f, 0.001447441f, 0.1519662f, -0.04790992f, -0.03429652f, -0.004348536f, 0.05950708f, 0.03089683f, -0.1101585f, -0.08882617f, 0.02064427f, -0.04657152f, -0.264539f, -0.189036f, 0.1380974f, -0.004727977f, -0.1407992f, 0.1176744f, 0.03887927f, 0.09611394f, -0.08994001f, 0.1110369f, 0.009036385f, -0.02600937f, -0.2013975f, -0.1671276f, -0.1962735f, -0.1060214f, 0.1645746f, 0.06903587f, 0.06479486f, -0.1848122f, -0.237828f, -0.01859833f, 0.02197818f, 0.1139079f, 0.1602141f, 0.05912198f, -0.1095606f, 0.1156239f, -0.07482226f, -0.008438897f, 0.1014004f, 0.02502124f, -0.1166988f, 0.02497046f, 0.1178088f, -0.01759307f, 0.03290892f, -0.124769f, 0.002394441f, -0.2268521f, 0.08922297f, -0.009570047f, 0.09725461f, 0.1289279f, -0.06541023f, -0.1238421f, -0.04851111f, 0.004947208f, 0.001952316f, -0.05795956f, 0.1279198f, -0.220106f, 0.07525665f, -0.01515371f, 0.05143514f, 0.1547449f, -0.07073861f, 0.0435925f, 0.04325736f, -0.02399695f, -0.1092537f, -0.1398304f, -0.09552065f, 0.108571f, 0.05306277f, -0.05465585f, 0.06402304f, 0.03253089f, 0.07830494f, 0.1672918f, 0.003709488f, -0.01692594f, -0.02696384f, 0.08919496f, 0.1920464f, -0.03827748f, -0.1808571f, 0.09210899f, -0.04467639f, -0.1105068f, -0.1754412f, -0.04450821f, 0.002468991f, -0.02557758f, -0.1892457f, -0.2548812f, 0.1998447f, -0.03613949f, -0.1097696f, -0.1537923f, -0.05690618f, 0.1854102f, -0.1782897f, -0.03363375f, 0.1926251f, 0.07866709f, 0.06150757f, 0.08749466f, -0.1380895f, 0.1622027f, -0.1299593f, -0.1704176f, 0.129579f, 0.06717293f, -0.02414227f, 0.1333441f, -0.1813256f, -0.1699026f, -0.3544564f, 0.209658f, 0.2441201f, 0.1748229f, 0.0798061f, -0.09817384f, 0.1159007f, 0.1044352f, -0.1274734f, 0.02476712f, -0.1900076f, 0.198873f, 0.07733213f, -0.185996f, -0.07945206f, -0.03325469f, -0.146541f, 0.1451443f, 0.1549633f, 0.09350145f, -0.1004663f, -0.1410564f, -0.005896154f, 0.2854703f, 0.1448649f, -0.02880164f, -0.08609532f, -0.1412744f, 0.03067792f, -0.1084137f, 0.1767838f, 0.06920049f, 0.1097949f, 0.1718279f, -0.01443869f, 0.008499717f, 0.04189153f, 0.00874448f, 0.2710832f, 0.1200367f, -0.004384375f, -0.009234349f, -0.1919378f, 0.004553107f, 0.2811667f, 0.02489188f, -0.03202651f, -0.07832118f, -0.2079888f, -0.09285548f, -0.07660703f, 0.05671396f, 0.03670298f, 0.1438785f, 0.06444432f, 0.06302859f, 0.07960387f, 0.4464954f, -0.1831846f, 0.1561573f, -0.0526652f, 0.03120224f, -0.203821f, -0.04353987f, 0.1043158f, -0.01436205f, 0.1243148f, -0.1172114f, -0.03402451f, 0.07701755f, 0.1183362f, 0.1234692f, 0.1846699f, -0.03199881f, 0.03697935f, -0.05443155f, 0.2512422f, 0.06691442f, 0.1144792f, -0.2104282f, -0.03243755f, -0.1159332f, -0.1125535f, -0.09633669f, 0.08568713f, 0.003051748f, 0.3197567f, -0.149537f, 0.1308106f, 0.1142886f, -0.07178567f, -0.05753192f, 0.006575693f, 0.2216195f, 0.1222083f, 0.007480452f, -0.1991142f, -0.1635803f, 0.1368708f, -0.07710373f, 0.1903723f, 0.01721575f, 0.06698617f, -0.05898814f, 0.1050543f, -0.2277854f, -0.05893628f, -0.04017353f, 0.144582f, 0.1059018f, -0.07430347f, 0.194223f, -0.06184007f, -0.1169827f, 0.09671892f, 0.004724665f, 0.1775883f, 0.181454f, 0.02630088f, 0.1763608f, -0.042728f, -0.1369941f, -0.07355153f, 0.1288534f, 0.1381583f, 0.01774728f, 0.1014215f, -0.004122409f, 0.1680757f, 0.0352621f, 0.008397986f, -0.00698843f, -0.00469331f, 0.1023892f, -0.1802567f, -0.03140485f, -0.09464425f, -0.1692802f, 0.01690853f, -0.02513402f, 0.1264259f, 0.1360185f, -0.005143092f, 0.1743594f, -0.1134093f, 0.1589538f, 0.09093376f, -0.083098f, -0.07466392f, 0.0961628f, -0.1867043f, -0.1707431f, -0.08555034f, 0.07061184f, -0.1735803f, -0.0688941f, -0.1301967f, 0.08182932f, -0.02920699f, -0.07598814f, 0.07308095f, 0.1229594f, 0.1695351f, -0.1988549f, 0.06288554f, -0.05582611f, -0.115946f, 0.05436354f, -0.1373624f, -0.01663837f, -0.09451498f, -0.05652416f, 0.1569518f, 0.06558635f, 0.03412865f, -0.2026207f, -0.1065098f, -0.1185974f, 0.01739448f, -0.1844954f, -0.01900999f, 0.04806754f, -0.1732385f, 0.01820735f, -0.1907749f, 0.146189f, 0.2003706f, -0.1118123f, -0.06777856f, -0.09261922f, -0.05904726f, -0.2164742f, 0.07257307f, -0.2637078f, 0.05366616f, 0.11443f, -0.2204789f, -0.09612746f, 0.159766f, -0.08401874f, -0.07350166f, 0.07513076f, -0.1466891f, -0.06041706f, -0.07353546f, 0.2668604f, -0.0840546f, -0.02796077f, 0.02280653f, 0.002604418f, 0.2735776f, 0.03127364f, 0.09619565f, 0.1364651f, -0.02713384f, -0.006801476f, -0.04808656f, -0.161253f, 0.2479996f, -0.124756f, -0.02450348f, -0.2010035f, -0.1600667f, 0.01207183f, 0.08768611f, -0.1076157f, -0.03882315f, 0.1186953f, 0.05887039f, -0.03329917f, -0.092684f, 0.06307493f, -0.1327406f, 0.0876088f, -0.08831563f, 0.1186477f, 0.03678077f, -0.08021534f, -0.3103951f, -0.2446546f, 0.3081622f, 0.1131833f, 0.1228339f, 0.08588963f, -0.1637171f, 0.1557094f, 0.1701876f, 0.03369227f, 0.1867888f, -0.03693404f, 0.1314271f, -0.1098387f, -0.08694742f, 0.4022685f, 0.09184744f, 0.0009574223f, -0.1383831f, -0.2368364f, 0.08916773f, 0.4307104f, -0.009157587f, -0.04651669f, -0.1714236f, 0.026584f, 0.1424349f, -0.1707493f, 0.1162905f, -0.1429087f, 0.04271695f, -0.07229848f, 0.09626502f, -0.0967214f, -0.009535065f, -0.0126666f, -0.1003297f, 0.1111308f, -0.1172957f, 0.08019303f, -0.07628886f, 0.01898352f, -0.2033765f, -0.01284401f, 0.08769453f, 0.1475862f, -0.001919705f, 0.06594032f, -0.100577f, -0.08376252f, 0.06303571f, -0.1863339f, -0.1792735f, -0.1276633f, 0.1865246f, -0.08245964f, -0.02767127f, -0.1744601f, 0.1135039f, 0.05184124f, -0.180679f, 0.02091869f, -0.1516455f, 0.02593013f, 0.09736375f, -0.06321651f, -0.0532978f, -0.1030587f, -0.05036436f, -0.1019896f, -0.004268148f, 0.010357f, -0.1859675f, -0.08595584f, 0.0364478f, -0.1741916f, -0.1736543f, -0.118892f, -0.07937928f, -0.05422187f, -0.1630466f, -0.1087647f, -0.2166006f, 0.09500353f, 0.1902393f, 0.1278916f, -0.1889472f, 0.1314729f, -0.02907291f, 0.1747617f, -0.04844389f, 0.1823154f, -0.1279255f, 0.03765412f, 0.2319089f, 0.07115974f, -0.2763616f, 0.01223996f, 0.1280656f, 0.04383562f, -0.1375981f, 0.08143412f, 0.07426395f, 0.06053216f, -0.03143137f, 0.1775815f, -0.1089213f, -0.09694661f, -0.142565f, 0.1505373f, -0.2240451f, -0.148321f, 0.08041551f, -0.08039133f, -0.161507f, -0.10068f, 0.1351004f, -0.09818107f, -0.07262748f, -0.05416034f, -0.1860155f, -0.1381885f, 0.08724768f, 0.08743785f, -0.1030806f, 0.09086014f, -0.1881003f, 0.154166f, 0.07305568f, 0.05980174f, -0.0650572f, -0.05135709f, 0.1613394f, -0.1287905f, 0.1308316f, -0.07036763f, 0.1640007f, 0.1108423f, 0.1883703f, 0.1444058f, 0.1101898f, -0.1366597f, 0.0395583f, 0.006151543f, -0.2754f, 0.1910729f, 0.01829876f, -0.08302169f, 0.0270475f, -0.03435825f, -0.1452479f, -0.05866264f, 0.09865827f, -0.2156756f, -0.01387618f, -0.03384298f, -0.1706768f, -0.1916647f, -0.002680233f, 0.009575263f, 0.166877f, 0.1786626f, -0.1331542f, 0.1438377f, 0.004722373f, 0.2259056f, -0.09626766f, -0.1873827f, 0.2118219f, -0.1473318f, 0.111054f, 0.07745561f, 0.03944015f, -0.02968637f, 0.2002527f, -0.2605674f, 0.008070254f, -0.08764622f, 0.06331728f, -0.009005944f, -0.1367259f, 0.0909807f, 0.1857173f, 0.00862795f, 0.1645268f, 0.08402484f, 0.2271643f, -0.006650709f, -0.08041342f, -0.1250304f, 0.0625326f, 0.003151882f, -0.1152317f, 0.1047352f, 0.2157101f, -0.1550213f, 0.1032656f, -0.1032458f, -0.1145539f, 0.1358215f, -0.1446616f, 0.01939733f, 0.05412992f, 0.07288999f, 0.08635318f, -0.1823325f, 0.02643087f, -0.03864388f, -0.05837844f, -0.09614227f, -0.1521677f, 0.01690282f, -0.08235162f, 0.06725332f, -0.02317897f, -0.09492686f, -0.1465062f, -0.04945421f, 0.01702727f, 0.2022934f, 0.03728133f, -0.2180139f, 0.1890877f, 0.02260703f, 0.1381592f, -0.1655617f, 0.07482646f, -0.1507931f, 0.01128656f, -0.1175553f, -0.04688086f, 0.2327112f, 0.1316678f, -0.1649716f, -0.1758757f, -0.0973208f, 0.0737783f, 0.1214039f, 0.1709586f, 0.09946179f, -0.0007455213f, -0.008033748f, -0.1449385f, -0.05641302f, 0.1309004f, -0.001259087f, -0.1396865f, -0.1640635f, 0.03036145f, 0.1627149f, 0.02326696f, 0.1432934f, 0.05706052f, 0.07437325f, 0.1509244f, -0.1007986f, -0.0945874f, -0.07419553f, -0.135106f, 0.11054f, -0.1721613f, 0.1994119f, -0.01772195f, 0.1374527f, 0.1479969f, 0.03866316f, -0.01543535f, 0.04438183f, 0.09710382f, 0.05513396f, -0.1647787f, 0.1880633f, 0.01845324f, 0.1516351f, -0.1681956f, -0.008792552f, 0.09332728f, 0.1868604f, -0.08366656f, 0.08742964f, 0.01124274f, 0.1335457f, -0.1381018f, -0.1038633f, 0.01443988f, -0.01294101f, 0.1969591f, 0.02861897f, -0.05560648f, 0.1695383f, 0.1637359f, 0.02783602f, 0.02918014f, 0.08592538f, -0.2295093f, 0.06673374f, 0.08102875f, -0.02852295f, 0.0587129f, 0.1898393f, 0.06728871f, -0.05662075f, -0.09838866f, -0.07500587f, -0.08416428f, 0.07499413f, -0.009972071f, -0.06651645f, 0.1138674f, 0.1053737f, -0.01423989f, 0.0905874f, -0.0658604f, 0.1764073f, 0.1816087f, -0.1434946f, -0.05520828f, -0.1092472f, -0.1055947f, 0.1310693f, 0.057268f, 0.1080821f, -0.04087195f, 0.1964915f, -0.02690128f, -0.07396908f, -0.001251107f, 0.1722021f, -0.1666802f, -0.1912729f, 0.1403358f, 0.003273259f, -0.04668331f, 0.112229f, 0.1821968f, 0.1470489f, -0.3175685f, 0.02964708f, -0.0354153f, -0.128549f, -0.005580247f, 0.1689999f, 0.2620289f, 0.1817261f, -0.1402671f, 0.07398787f, -0.03503632f, -0.1578855f, 0.04792622f, -0.179567f, -0.1392528f, 0.04125715f, 0.05719485f, -0.1123097f, -0.01932325f, 0.09437271f, 0.1043214f, 0.05292168f, -0.03197174f, 0.1145896f, 0.1960539f, 0.01274771f, -0.1502818f, -0.1860045f, -0.1309956f, 0.1561494f, -0.1643903f, -0.09143076f, -0.1047786f, 0.1736026f, 0.009616094f, -0.1468381f, -0.1450469f, 0.07972037f, -0.04591727f, -0.1336938f, -0.07458709f, -0.009323843f, 0.07500166f, -0.03010556f, -0.1054283f, 0.1283118f, -0.1265475f, -0.1974899f, -0.1954602f, 0.1692045f, -0.06735413f, 0.18211f, -0.06120976f, -0.01531565f, -0.04341145f, 0.04695421f, 0.1936438f, 0.1503495f, 0.1431614f, -0.1911797f, 0.02032851f, 0.1776165f, 0.02340341f, -0.1000604f, 0.08597303f, -0.127045f, -0.1858634f, 0.1536161f, -0.1612584f, 0.1336745f, 0.1320679f, 0.07565575f, -0.2617047f, 0.1874158f, 0.1283443f, 0.09367287f, -0.2844159f, 0.07439633f, 0.2591385f, 0.08332966f, 0.03499728f, 0.09162248f, -0.009933123f, 0.03487269f, 0.03409297f, -0.1858831f, -0.116612f, 0.2264096f, -0.06707907f, -0.07439357f, -0.0625921f, -0.2665468f, -0.09569847f, -0.03241969f, 0.1708221f, 0.2022512f, 0.2275096f, 0.1152707f, 0.09303145f, -0.115456f, 0.09940669f, 0.02025896f, 0.2026638f, 0.2024531f, 0.1823803f, -0.1469452f, 0.2263568f, -0.08375423f, -0.167384f, 0.2269599f, 0.2040052f, -0.09158063f, 0.06188921f, 0.003273468f, 0.05142089f, 0.04213384f, -0.01110016f, -0.02849996f, -0.005202078f, 0.04864173f, -0.2394385f, 0.01018863f, -0.03154168f, 0.07810449f, 0.003885508f, -0.05342867f, 0.02052855f, -0.04541732f, -0.1015442f, -0.16993f, -0.1207949f, 0.4607906f, -0.1350473f, 0.1528072f, 0.1873197f, -0.1325552f, 0.09202763f, -0.2946873f, -0.1873839f, -0.1102888f, 0.1535398f, 0.0577818f, 0.1763589f, -0.3524233f, 0.03605085f, -0.02665362f, 0.05388873f, 0.06153188f, -0.2406445f, -0.09330914f, -0.008015843f, 0.05769855f, -0.01941245f, -0.1394193f, -0.04890404f, 0.3547352f, -0.08535893f, -0.0328599f, 0.06180766f, 0.1608587f, 0.0147612f, 0.176457f, -0.02569235f, -0.1787138f, -0.03519535f, 0.1570905f, -0.02390174f, 0.0518284f, 0.1012591f, -0.00102429f, 0.02019936f, 0.1100418f, -0.1053977f, 0.0536705f, -0.1503405f, 0.07268842f, 0.01876023f, -0.142342f, -0.19001f, 0.2271512f, -0.02155724f, 0.05955964f, 0.03143837f, -0.1681887f, 0.07095894f, 0.1120901f, -0.1110561f, -0.1897997f, -0.07386425f, 0.08792575f, 0.2438887f, 0.3105129f, -0.1951006f, 0.002082243f, 0.01767364f, 0.1010682f, -0.01149857f, -0.1175878f, 0.08481829f, -0.09555271f, -0.08186438f, -0.01479129f, -0.00736772f, 0.3876282f, -0.2382559f, 0.0002413207f, 0.0002836028f, -0.003471772f, -0.1003151f, 0.06278979f, 0.0699529f, 0.006356692f, -0.1207885f, -0.09228577f, -0.2254957f, 0.3782943f, 0.02726371f, -0.1307942f, -0.07443117f, -0.07432678f, 0.0572343f, -0.1963687f, -0.06362854f, 0.111604f, 0.1747693f, -0.04622569f, 0.1804861f, 0.1189464f, 0.07963748f, -0.05709152f, 0.08350424f, -0.07976718f, -0.09017289f, 0.255193f, -0.1037299f, 0.07250972f, 0.07109123f, 0.01108341f, 0.1582098f, -0.07906996f, -0.153471f, -0.07055464f, -0.1589037f, -0.1347685f, 0.1040654f, 0.1458061f, -0.1326099f, -0.09018173f, -0.1931069f, -0.1698311f, -0.05637691f, 0.2796242f, -0.04826637f, -0.04973632f, -0.0449558f, 0.2313206f, 0.03206216f, -0.047258f, 0.004617203f, -0.008807578f, 0.07936203f, 0.07965649f, -0.0279032f, 0.3783573f, 0.2184552f, 0.02124624f, -0.1728412f, -0.02892241f, 0.04619834f, -0.003012282f, 0.08657891f, -0.141689f, 0.03599836f, 0.1307369f, -0.1012142f, -0.001076353f, -0.04692152f, 0.002308742f, -0.09278759f, 0.1099915f, -0.1623372f, -0.08338143f, 0.08534696f, 0.09937331f, -0.0915893f, 0.08300741f, 0.006142729f, 0.3458936f, -0.1403497f, -0.1575096f, -0.1833546f, -0.1335488f, 0.1231568f, 0.1635116f, 0.07214081f, 0.1550295f, -0.1697977f, -0.1061287f, -0.1624909f, -0.01931984f, 0.02017139f, -0.1066371f, 0.1287133f, 0.08586933f, 0.3946296f, -0.2310011f, -0.1576339f, 0.1861497f, -0.1383549f, 0.0182111f, -0.1516454f, 0.1593145f, -0.01864782f, 0.003290914f, -0.1297022f, 0.003555367f, 0.01864904f, 0.1414403f, -0.06747828f, 0.2201353f, 0.204364f, 0.001375917f, -0.07234697f, 0.3320079f, 0.07334525f, 0.01300867f, 0.08033022f, 0.004517738f, -0.4251167f, 0.05650206f, -0.1655932f, -0.1148686f, 0.01921284f, -0.2004908f, 0.1949081f, -0.2255532f, -0.04897452f, -0.2192941f, 0.1976724f, 0.132634f, 0.09638611f, -0.1110038f, 0.03333157f, -0.1451738f, 0.1102305f, 0.05493395f, -0.01748529f, 0.06046041f, 0.1392768f, -0.1192298f, -0.2337455f, -0.08574451f, 0.03720303f, 0.1868397f, -0.2181797f, -0.02899929f, 0.1478865f, -0.06482119f, -0.1010477f, 0.1873714f, 0.167486f, -0.1299172f, -0.2465031f, -0.06554176f, -0.1452721f, -0.03103024f, -0.1147175f, -0.1073574f, 0.002887719f, 0.1107308f, -0.04128995f, 0.0332302f, -0.2446114f, 0.04738114f, 0.01924134f, 0.09167558f, 0.07770821f, 0.1089762f, -0.07443909f, -0.1752166f, -0.1394603f, -0.1734291f, -0.1052574f, 0.3154352f, -0.1477055f, 0.1844384f, -0.08208989f, 0.1395886f, -0.1464231f, -0.06432696f, -0.1386839f, 0.1407995f, 0.1913826f, -0.08643269f, -0.003763362f, 0.02034452f, -0.1474297f, 0.2119654f, -0.01427087f, 0.1559625f, 0.1356205f, 0.006176743f, 0.08266734f, -0.1418697f, 0.0556903f, 0.01028634f, -0.1312478f, -0.1117017f, 0.1804837f, 0.06993216f, -0.02472113f, -0.1473956f, 0.08374842f, 0.006446211f, 0.03922617f, -0.08395365f, -0.1316157f, 0.1305111f, 0.07478792f, -0.08519589f, -0.18065f, -0.03198621f, -0.1738374f, 0.0835008f, 0.07859251f, -0.06531174f, -0.1123137f, -0.09858496f, -0.1018469f, -0.04281159f, 0.2584253f, 0.1114581f, 0.03398006f, -0.2075811f, 0.008131236f, 0.111568f, -0.2715861f, 0.06440189f, 0.1381391f, 0.02478508f, -0.1537527f, -0.07352267f, -0.1563916f, -0.1004253f, 0.01290801f, 0.1843084f, -0.1705275f, -0.09423117f, -0.1325402f, -0.1911483f, 0.08560789f, 0.09091411f, 0.03559024f, 0.01658652f, 0.08553728f, 0.06546579f, -0.1383413f, -0.1448161f, 0.05454341f, -0.08608074f, 0.07487446f, -0.1418027f, 0.1525675f, -0.05047271f, 0.1764894f, -0.1477936f, 0.04046162f, 0.1294381f, 0.06648403f, -0.04522354f, -0.01194328f, -0.1660848f, -0.1993981f, -0.01220368f, -0.002249303f, 0.2166029f, -0.05104436f, 0.06703074f, 0.1128884f, 0.134418f, -0.1357851f, -0.03466435f, 0.07808173f, 0.1880929f, -0.2024149f, -0.2231079f, 0.1555505f, 0.111559f, -0.2538279f, 0.127177f, 0.08210149f, 0.1342744f, 0.05201522f, 0.04504003f, 0.02904308f, 0.06160182f, 0.1313955f, 0.03717618f, -0.2252263f, -0.1920935f, -0.1375297f, -0.1571739f, 0.08586223f, 0.1607557f, -0.06584144f, 0.1242643f, 0.0411447f, -0.2249528f, 0.007898078f, 0.09650529f, -0.1864779f, -0.1152718f, 0.108801f, 0.177832f, 0.1434797f, 0.1635379f, -0.06269848f, 0.05469359f, 0.05355595f, 0.07636548f, 0.1437708f, -0.1115197f, 0.2339592f, 0.01876044f, 0.1222857f, 0.010081f, -0.05956641f, -0.0843729f, -0.09096537f, 0.03569022f, 0.1804191f, 0.1600464f, 0.1900188f, 0.169644f, 0.07770435f, -0.02241493f, 0.06442709f, -0.06658319f, -0.07650552f, -0.1869097f, -0.06050469f, 0.002384951f, 0.09468037f, 0.002089666f, -0.05848202f, -0.04180441f, 0.05044698f, -0.1638057f, 0.1066277f, 0.06731633f, 0.01400002f, -0.01782859f, -0.1152426f, 0.1413214f, -0.08343549f, 0.07318206f, -0.0945521f, 0.1267355f, -0.1190406f, 0.1942204f, -0.0330312f, 0.1200602f, 0.03375882f, -0.224789f, 0.0267192f, 0.02053834f, 0.09223488f, 0.04312996f, 0.06495623f, 0.1320834f, -0.1365986f, -0.1019543f, -0.1870855f, -0.1449171f, -0.1516614f, 0.1209247f, 0.153112f, 0.01191223f, -0.211711f, 0.1260518f, -0.05306599f, -0.04229961f, 0.1494116f, 0.07371239f, 0.06047616f, 0.1184433f, 0.09671475f, 0.1478905f, 0.130746f, 0.155318f, -0.2080906f, 0.1454295f, -0.1129797f, 0.07987984f, 0.1219632f, 0.1550161f, -0.09181221f, -0.1832054f, 0.07711985f, 0.004500573f, 0.01878784f, 0.07496202f, -0.005343408f, -0.2046376f, 0.05807304f, 0.01051124f, -0.1093463f, -0.08821445f, -0.03521363f, -0.1861286f, -0.008596048f, 0.09334529f, 0.04763849f, 0.07172899f, 0.02344068f, -0.01883082f, -0.2005955f, 0.06833117f, -0.06357497f, 0.2093914f, -0.09501337f, 0.03877503f, 0.00330183f, -0.1280679f, -0.02966187f, -0.05180943f, 0.0833403f, -0.009429854f, -0.07180125f, 0.09933101f, -0.06213964f, -0.02095699f, 0.04841569f, -0.1317426f, -0.02407805f, 0.1793623f, -0.1217377f, -0.01988846f, 0.2325153f, 0.1290496f, -0.009790266f, 0.05141275f, 0.006974678f, -0.17509f, -0.1442961f, -0.2031253f, 0.06880135f, -0.1052795f, -0.09233136f, 0.006347397f, -0.1091067f, 0.07221383f, 0.1325672f, -0.1211047f, -0.094969f, 0.0009429611f, 0.06019855f, 0.08508312f, -0.125205f, 0.1716138f, -0.0007174002f, 0.05605555f, -0.1670221f, 0.02015013f, 0.1285191f, 0.1446253f, 0.02863782f, -0.03440747f, 0.1332663f, 0.1154933f, 0.1134534f, -0.09637253f, -0.1602012f, -0.1554039f, 0.02613126f, -0.02387332f, 0.1282846f, -0.1748527f, 0.1824236f, -0.1470163f, 0.02751407f, 0.161478f, -0.008889658f, 0.1030196f, 0.01602991f, -0.2232315f, 0.04707648f, -0.02658284f, 0.01283553f, 0.02443024f, 0.1369339f, 0.01947905f, 0.1842528f, -0.1741321f, 0.2668603f, 0.181776f, -0.01192442f, 0.008790665f, 0.1944006f, 0.1537225f, 0.04098567f, -0.1200326f, 0.1057791f, -0.1996345f, -0.06706528f, -0.06781647f, -0.08339781f, 0.118057f, -0.05955067f, -0.02978781f, 0.1532523f, -0.1375271f, 0.1523289f, 0.01910269f, 0.1758886f, 0.07088758f, 0.01881761f, 0.07336599f, -0.1143774f, 0.1713584f, -0.09866978f, 0.08448745f, 0.1791809f, -0.1527958f, -0.02732508f, 0.06946712f, -0.1842368f, -0.1406006f, -0.03501625f, 0.1669537f, 0.09750025f, 0.1012504f, 0.119315f, -0.0561742f, 0.1220804f, -0.1187425f, -0.1247255f, 0.12966f, -0.1323403f, 0.1075373f, -0.1691493f, -0.1304434f, 0.1410949f, 0.03954559f, 0.03017553f, -0.09438885f, -0.1730313f, 0.1367413f, 0.1983925f, -0.08821763f, -0.01746714f, -0.0271288f, 0.1115607f, 0.1766394f, 0.07812845f, -0.1282006f, 0.1795769f, 0.01101147f, -0.04637781f, -0.1374559f, -0.03577012f, -0.1872932f, -0.1437245f, 0.1595351f, -0.1392907f, 0.1853151f, 0.09052379f, 0.06091248f, -0.09489012f, -0.1212559f, 0.04970171f, 0.1210054f, 0.1039047f, -0.197939f, 0.07005865f, 0.2013759f, 0.1318303f, 0.09478986f, 0.2188819f, 0.05215697f, -0.02614252f, -0.1130611f, -0.1918438f, 0.08037998f, 0.1452154f, -0.1454758f, 0.1422508f, -0.1351622f, -0.06610346f, -0.1506377f, 0.1509725f, -0.1123761f, -0.2018203f, -0.07490586f, -0.09567124f, 0.1727585f, 0.2170845f, -0.186435f, 0.0360409f, 0.04850384f, -0.06841149f, -0.1205612f, 0.07279685f, 0.03326087f, -0.04911419f, -0.0659162f, 0.06486212f, 0.05117325f, -0.1555575f, -0.1808575f, 0.02736182f, 0.003477759f, -0.05496346f, -0.1964778f, -0.1394122f, -0.172753f, -0.02261482f, 0.1680849f, 0.07480507f, 0.002085834f, 0.001000106f, -0.01053624f, -0.09571769f, -0.008683201f, -0.01652703f, 0.1222666f, 0.09777367f, -0.1690532f, -0.1195621f, -0.1531505f, -0.004697479f, 0.04065274f, -0.1088858f, -0.0587965f, -0.1117374f, -0.161688f, 0.1112681f, 0.1774119f, 0.1200865f, -0.1286322f, -0.1499752f, 0.1040405f, -0.05425734f, 0.0008084976f, 0.04896459f, 0.1000397f, -0.1063102f, 0.1583458f, 0.08773433f, 0.02819658f, -0.01711934f, -0.0324975f, 0.06530975f, -0.09149186f, 0.1608836f, 0.05858043f, -0.1432514f, -0.05519424f, 0.1727501f, -0.1375979f, 0.1233198f, -0.119991f, -0.09145594f, 0.05088677f, -0.04040736f, 0.1749335f, -0.1341947f, 0.189269f, 0.01949275f, -0.004345706f, 0.1138002f, 0.184147f, -0.131626f, -0.04501294f, -0.1333544f, 0.1165744f, -0.04374555f, 0.03712848f, -0.2052723f, 0.1173448f, -0.1602868f, 0.1474484f, -0.1218287f, 0.2244176f, 0.126648f, 0.1192269f, 0.005388433f, -0.1630759f, 0.1119385f, 0.06059482f, 0.02691071f, -0.04077677f, -0.1036085f, -0.09067374f, -0.1294624f, -0.00850317f, 0.02824242f, -0.04580902f, 0.05429738f, 0.0992193f, 0.06254344f, -0.06340489f, -0.1440765f, -0.1005654f, -0.05263111f, -0.090752f, -0.03727606f, -0.08429311f, 0.1490115f, 0.1656208f, -0.08010203f, -0.01594474f, 0.1580176f, 0.1305484f, -0.08847927f, 0.05000729f, 0.1480025f, -0.2040348f, 0.1484039f, -0.02628951f, -0.04643848f, 0.1514625f, 0.1440112f, -0.01441811f, 0.1797056f, 0.03233243f, 0.1162156f, 0.1922502f, 0.1667274f, 0.05930869f, 0.1537529f, -0.1018854f, 0.04391672f, 0.1550969f, -0.1094262f, -0.1961213f, 0.1581517f, 0.1946038f, 0.1148732f, -0.09686381f, 0.1401213f, -0.08670795f, -0.03770439f, -0.01826809f, 0.03781299f, 0.01521504f, -0.01247562f, -0.06658725f, -0.1432478f, -0.07068969f, 0.1768636f, 0.03398107f, 0.1391268f, -0.194923f, -0.0111978f, -0.07572685f, -0.1635151f, 0.01993246f, 0.06550863f, -0.1790914f, -0.05103032f, 0.1000653f, -0.08910958f, -0.02709277f, -0.07201045f, 0.008428901f, -0.08247323f, -0.1371272f, -0.01614598f, -0.1083738f, -0.0432807f, 0.001028105f, 0.1715257f, 0.1153244f, -0.1633033f, -0.01201275f, -0.02393053f, -0.04590075f, -0.04094064f, 0.1612384f, 0.0949092f, -0.01310191f, -0.09944773f, -0.1190837f, -0.07771432f, -0.09861618f, -0.06329362f, 0.107878f, 0.07325164f, -0.2132074f, -0.1441129f, 0.07877842f, -0.1334934f, -0.1384241f, 0.1520434f, -0.08429632f, -0.01321756f, -0.2339766f, -0.094814f, 0.1210692f, 0.1124315f, -0.01203236f, 0.1906525f, 0.3878369f, -0.07840255f, 0.1248683f, 0.1767402f, -0.04880972f, -0.07750653f, -0.1874587f, -0.01087195f, -0.1529808f, -0.0004036079f, 0.1040346f, 0.1365418f, 0.1298612f, 0.05523986f, 0.05034335f, 0.04319277f, 0.179513f, 0.1939285f, 0.1156319f, 0.1800202f, -0.1645317f, -0.1720198f, -0.04127951f, 0.06946469f, 0.04531793f, 0.162426f, 0.2098465f, 0.02169584f, 0.1757346f, 0.8417818f, 0.1148061f, -0.5290546f, 0.5928268f, -0.4916022f, -0.2479114f, -0.003124206f, 0.6259326f, 0.1076844f, -0.4193278f, -0.0298926f, -0.8797948f, -0.1021657f, -0.4037458f, -0.1274944f, -0.2491758f, 0.148353f, 0.1178306f, -0.2019372f, 0.5472068f, -0.004135187f, -0.1238607f, 0.7770256f, 0.1879893f, -0.8559136f, 0.04020032f, -0.2676224f, 0.03400426f, 0.378664f, -0.143873f, -0.2923255f, -0.8629049f, -0.1603208f, 0.1733146f, 0.5948691f, -0.3747009f, 0.4593758f, -0.337341f, -0.4209783f, -0.1192531f, -0.048796f, -0.02650589f, -0.04388085f, -0.1038206f, -0.2269563f, 0.2276687f, -0.2489766f, 0.08515633f, -0.7006872f, -0.3778439f, 0.1290373f, -0.1660672f, 0.4017158f, -0.5391384f, 0.07823624f, 0.3066849f, -0.01714016f, 0.1832648f, -0.3825011f, -0.3665826f, 0.01770826f, 0.4953834f, -0.1639928f, 0.2671125f, -0.5976337f, -0.5759076f, 0.07548573f, 0.09105971f, 0.1029751f, 0.766903f, -0.3263842f, 0.1107592f, 0.06810223f, -0.327822f, 0.2179584f, 0.09523326f, -0.5832297f, -0.6118882f, 0.2043272f, -0.2093364f, -0.04170812f, 0.1312653f, 0.343608f, 0.05554779f, -0.5430422f, -0.4493799f, 0.05436027f, -0.3007183f, -0.217692f, 0.09643327f, -0.09314142f, -0.5610784f, 0.4958381f, -0.333506f, -0.07248443f, -0.055692f, 0.4199542f, -0.1841455f, 0.2047471f, -0.4600426f, -0.2790812f, 0.9347205f, 0.1754935f, -0.2901157f, -0.2721791f, 0.05988433f, -0.1883724f, 0.5924542f, 0.2292563f, -0.2073236f, -0.4208004f, -0.5458058f, -0.1631647f, 0.1573359f, -0.06623496f, 0.09315351f, 0.03455254f, -1.024047f, 0.282463f, 0.01758457f, 0.0329207f, -0.7130487f, -0.2478184f, 0.1945465f, 0.4802462f, 0.9387583f, -0.2427879f, 0.5250421f, -0.1335838f, 0.2616684f, 0.26417f, 0.3796602f, 0.1722862f, -0.1107102f, -0.05737622f, -0.2983828f, -0.1008066f, 0.00282353f, -0.0338554f, -0.1753024f, -0.1524548f, 0.5441098f, -0.2587963f, -0.2219242f, -0.1314728f, 0.1406317f, -0.1843938f, 0.3105313f, -0.08254407f, 0.1528555f, 0.2856067f, -0.2566758f, -0.0120587f, -0.440862f, -0.5063837f, 0.1128364f, -0.5690151f, 0.418239f, 0.6421834f, 0.4028276f, 0.7162623f, -0.2365984f, 0.4029086f, -0.1133115f, -0.4289495f, 0.2034602f, -0.1772951f, -0.07491698f, 0.4139601f, 0.1605946f, 0.07900898f, -0.02555521f, -0.3032581f, -0.5590013f, 0.2571401f, -0.2582932f, 0.7362071f, 0.1503689f, 0.7185107f, 0.6144975f, 0.1390207f, 0.4878888f, 0.4145053f, 0.1751936f, 0.377917f, -0.1118318f, -0.2486821f, 0.2091941f, 0.05032542f, -0.05849122f, -0.08326522f, 0.1585188f, 0.4111619f, 0.7050449f, 0.3735985f, -0.6516958f, 0.4201363f, -0.1042563f, -0.5198807f, 0.566128f, -0.376563f, 0.2331133f, -0.2017772f, -0.009791479f, 0.3451136f, 0.5325185f, 0.01241142f, 0.4599084f, 0.107685f, 0.554391f, -0.07959092f, -0.05844851f, -0.008939416f, -0.2238993f, 0.05775238f, -0.1224513f, 0.6970825f, -0.061129f, -0.1100043f, -0.09215021f, -0.1747797f, 0.1185557f, -0.2101513f, -0.1676238f, 0.03029389f, 
  -100.0f // Control value to check for buffer overruns.
};

// Thresholds for a gesture being recognised.
float thresholds[] = {
  0.0f,
  0.36f,
  0.38f,
  0.24f,
  0.2f,
  0.22f,
  0.1f,
  0.28f,
  0.22f,
};

MLG_GestureRecogniser::MLG_GestureRecogniser(int samplesPerSecond)
  : _network(12, 24, 9, parameters), 
    _xIntegral(), 
    _yIntegral(), 
    _zIntegral(), 
    _headingDifferential() {
    _sampleNumber = 0;

    if (samplesPerSecond < 10) {
      // Enforce lower bound of 10Hz.
      samplesPerSecond = 10;
    }
    _sampleRate = (samplesPerSecond + 5) / 10;
    _averagingFactor = 1.0f / ((float)_sampleRate);
    _xLinearAccelerationAverage = 0.0f;
    _yLinearAccelerationAverage = 0.0f;
    _zLinearAccelerationAverage = 0.0f;
}

MLG_GestureRecogniser::~MLG_GestureRecogniser() {
}

int MLG_GestureRecogniser::getSampleRate() {
  return _sampleRate * 10;
}

void MLG_GestureRecogniser::process(sensor_sample* sample) {
  // Average x y and z accelerations between frames. This is so that our
  // integrals and our network doesn't miss any component of the acceleration.
  _xLinearAccelerationAverage += sample->linearAccelerationX * _averagingFactor;
  _yLinearAccelerationAverage += sample->linearAccelerationY * _averagingFactor;
  _zLinearAccelerationAverage += sample->linearAccelerationZ * _averagingFactor;

  if (_sampleNumber % _sampleRate == 0) {
    // Euler headings, in degrees.
    float* inputs = _network.inputs();
    inputs[0] = sample->roll;
    inputs[1] = sample->pitch;
    inputs[2] = _headingDifferential.getValue(sample->heading);
  
    // Acceleration in meters per second per second.
    inputs[3] = _xLinearAccelerationAverage;
    inputs[4] = _yLinearAccelerationAverage;
    inputs[5] = _zLinearAccelerationAverage;

    // Integrals - approximate velocity, in meters per second.
    inputs[6] = _xIntegral.getValue(_xLinearAccelerationAverage);
    inputs[7] = _yIntegral.getValue(_yLinearAccelerationAverage);
    inputs[8] = _zIntegral.getValue(_zLinearAccelerationAverage);
  
    inputs[9] = sample->gravityX;
    inputs[10] = sample->gravityY;
    inputs[11] = sample->gravityZ;
    _network.feedForward();

    // Reset averages.
    _xLinearAccelerationAverage = 0.0f;
    _yLinearAccelerationAverage = 0.0f;
    _zLinearAccelerationAverage = 0.0f;
  }
  _sampleNumber = (_sampleNumber + 1) % _sampleRate;
}

bool MLG_GestureRecogniser::isGestureRecognised() {
  return getRecognisedGesture() > 0;
}

int MLG_GestureRecogniser::getRecognisedGesture() {
  float* outputs = _network.outputs();
  int gestureNumber = 0;
  for (int i = 1; i < _network.outputSize(); i++) {
    if (outputs[i] > thresholds[i]) {
      gestureNumber = i;
    }
  }
  return gestureNumber;
}

void MLG_GestureRecogniser::getRawGestureLikelihoods(float* likelihoods) {
  float* outputs = _network.outputs();
  for (int i = 0; i < _network.outputSize(); i++) {
    likelihoods[i] = outputs[i];    
  }
}


/*************************************
 * Implementation of preprocessing.
 *************************************/
 
 AccelerationIntegralPreprocessor::AccelerationIntegralPreprocessor() {
  _lastSum = 0.0f;
  _currentSum = 0.0f;
  _historyPos = 0;
  _integral = 0.0f;
  for (int i = 0; i < 50; i++) {
    _history[i] = 0.0f;
  }
}

AccelerationIntegralPreprocessor::~AccelerationIntegralPreprocessor() { 
}

float AccelerationIntegralPreprocessor::getValue(float input) {
  float meanCorrectedValue = input - ((_currentSum + _lastSum) / 50.0f);
  _integral = _integral * 0.95f + (meanCorrectedValue / 10.0f);

  // Update history and average.
  float valueRemoving = _history[_historyPos];
  _lastSum -= valueRemoving; 
  _currentSum += input;
  _history[_historyPos] = input;

  _historyPos++;
  if (_historyPos >= 50) {
    _historyPos = 0;
    
    // Avoid drift by rotating sums.
    _lastSum = _currentSum;
    _currentSum = 0.0f;
  }
  return _integral;  
}

HeadingDifferentialPreprocessor::HeadingDifferentialPreprocessor() {
  _historyPos = 0;
  _initialised = false;
  for (int i = 0; i < 10; i++) {
    _history[i] = 0.0f;
  }
}

HeadingDifferentialPreprocessor::~HeadingDifferentialPreprocessor() {
}

float HeadingDifferentialPreprocessor::getValue(float input) {
    if (!_initialised) {
      for (int i = 0; i < 10; i++) {
        _history[i] = input;
      }
      _initialised = true;
      return 0.0f;
    }
  
    int nextPos = (_historyPos + 1) % 10;
    float difference = input - _history[nextPos];
    if (difference > 180.0f)
    {
        difference -= 360.0f;
    }
    else if (difference < -180.0f)
    {
        difference += 360.0f;
    }
    _history[nextPos] = input;
    _historyPos = nextPos;
    return difference;
}


/*************************************
 * Implementation of LSTM Network and component
 * layers.
 *************************************/
// Zeros all elements of the specified array.
void ArrayClear(float* data, int size) {
  for (int i = 0; i < size; i++) {
    data[i] = 0.0f;
  }
}

// Copies elements from the source array to the destination array.
void ArrayCopy(float* source, float* destination, int size) {
  for (int i = 0; i < size; i++) {
    destination[i] = source[i];
  }
}

// Sets the destination vector to be the dot product of the input and weight vector.
void SetDotProduct(float* inputs, float* weights, float* destination, int size) {
  for (int i = 0; i < size; i++) {
    destination[i] = inputs[i] * weights[i];
  }
}

// Adds the dot-product of the input and weight arrays to the destination array.
void AddDotProduct(float* inputs, float* weights, float* destination, int size) {
  for (int i = 0; i < size; i++) {
    destination[i] += inputs[i] * weights[i];
  }
}

// In-place applies a dot product of a vector with a given set of weights.
void ApplyDotProduct(float* destination, float* weights, int size) {
   for (int i = 0; i < size; i++) {
    destination[i] = destination[i] * weights[i];
  }
}

// Adds a weighted version of the input to the destination array.
// The weight array must have dimensions inputSize * outputSize and be indexed as (output * outputSize + input).
void AddWeightedInput(float* inputs, float* weights, float* destination, int inputSize, int outputSize) {
  for (int o = 0; o < outputSize; o++) {
    for (int i = 0; i < inputSize; i++) {
      destination[o] += weights[o * inputSize + i] * inputs[i];
    }
  }
}

// Applies the layer activation function in-place to the given weighted sum.
// This is 4 * sigmoid(weightedInput - 2.0.
void ApplyLayerActivationFunction(float* outputs, int outputSize) {
  for (int i = 0; i < outputSize; i++) {
    float weightedSum = outputs[i];
    if (weightedSum > 0.0f) {
       outputs[i] = (4.0f / (1.0f + (float)exp(-weightedSum))) - 2.0f;
    } else {
       outputs[i] = 2.0f - (4.0f / (1.0f + (float)exp(weightedSum)));
    }
  }
}


// Applies the gate function in-place to the given weighted sum.
// This is the normal sigmoid function.
void ApplyGateActivationFunction(float* outputs, int outputSize) {
  for (int i = 0; i < outputSize; i++) {
    float weightedSum = outputs[i];
    if (weightedSum > 0.0f) {
       outputs[i] = (1.0f / (1.0f + (float)exp(-weightedSum)));
    } else {
       outputs[i] = 1.0f - (1.0f / (1.0f + (float)exp(weightedSum)));
    }
  }
}

// Applies the layer activation function to the given weighted inputs, storing
// the result in the output array.
// This is 4 * sigmoid(weightedInput) - 2.0.
void LayerActivationFunction(float* weightedInputs, float* outputs, int outputSize) {
  for (int i = 0; i < outputSize; i++) {
    float weightedSum = weightedInputs[i];
    if (weightedSum > 0.0f) {
       outputs[i] = (4.0f / (1.0f + (float)exp(-weightedSum))) - 2.0f;
    } else {
       outputs[i] = 2.0f - (4.0f / (1.0f + (float)exp(weightedSum)));
    }
  }
}

LSTMGate::LSTMGate(int inputSize, int outputSize, float** parameters) {
  _inputSize = inputSize;
  _outputSize = outputSize;
  
  _inputWeights = *parameters;
  *parameters += inputSize * outputSize;
  
  _temporalWeights = *parameters;
  *parameters += outputSize * outputSize;
  
  _cellWeights = *parameters;
  *parameters += outputSize;
  
  _biases = *parameters; 
  *parameters += outputSize;
}

LSTMGate::~LSTMGate() {
  // Do any clean-up in here.
}

void LSTMGate::feedForward(LSTMGateState* state) {
  ArrayCopy(_biases, state->_outputs, _outputSize);
  AddDotProduct(state->_cellStates, _cellWeights, state->_outputs, _outputSize);

  AddWeightedInput(state->_inputs, _inputWeights, state->_outputs, _inputSize, _outputSize);
  AddWeightedInput(state->_lastCellOutputs, _temporalWeights, state->_outputs, _outputSize, _outputSize);

  ApplyGateActivationFunction(state->_outputs, _outputSize);
}

LSTMGateState::LSTMGateState(int inputSize, int outputSize, float* inputs, float* lastCellOutputs, float* cellStates) {
  _inputSize = inputSize;
  _outputSize = outputSize;
  _inputs = inputs;
  _cellStates = cellStates;
  _lastCellOutputs = lastCellOutputs;
  _outputs = new float[outputSize];
}

LSTMGateState::~LSTMGateState() {
  delete[] _outputs;
}


LSTMLayer::LSTMLayer(int inputSize, int outputSize, float** parameters) {
  _inputSize = inputSize;
  _outputSize = outputSize;

  _inputWeights = *parameters;
  *parameters += inputSize * outputSize;

  _temporalWeights = *parameters;
  *parameters += outputSize * outputSize;

  _biases = *parameters;
  *parameters += outputSize;

  _inputGate = new LSTMGate(inputSize, outputSize, parameters);
  _forgetGate = new LSTMGate(inputSize, outputSize, parameters);
  _outputGate = new LSTMGate(inputSize, outputSize, parameters);
}

void LSTMLayer::feedForward(LSTMLayerState* state) {
  _inputGate->feedForward(state->_inputGate);
  _forgetGate->feedForward(state->_forgetGate);

  // Calculate input into cell state.
  ArrayCopy(_biases, state->_outputs, _outputSize);
  AddWeightedInput(state->_inputs, _inputWeights, state->_outputs, _inputSize, _outputSize);
  AddWeightedInput(state->_lastCellOutputs, _temporalWeights, state->_outputs, _outputSize, _outputSize);
  
  ApplyLayerActivationFunction(state->_outputs, _outputSize);
  ApplyDotProduct(state->_cellStates, state->_forgetGate->_outputs, _outputSize);
  AddDotProduct(state->_outputs, state->_inputGate->_outputs, state->_cellStates, _outputSize);
  
  _outputGate->feedForward(state->_outputGate);
  LayerActivationFunction(state->_cellStates, state->_outputs, _outputSize);
  ApplyDotProduct(state->_outputs, state->_outputGate->_outputs, _outputSize);

  for (int i = 0; i < _outputSize; i++) {
    state->_lastCellOutputs[i] = state->_outputs[i];
  }
}

LSTMLayer::~LSTMLayer() {
}

LSTMLayerState::LSTMLayerState(int inputSize, int outputSize, float* inputs, float* outputs) {
  _inputSize = inputSize;
  _outputSize = outputSize;
  _inputs = inputs;
  _outputs = outputs;
  _cellStates = new float[outputSize];
  _lastCellOutputs = new float[outputSize];
  ArrayClear(_cellStates, outputSize);
  ArrayClear(_lastCellOutputs, outputSize);
  
  _inputGate = new LSTMGateState(inputSize, outputSize, inputs, _lastCellOutputs, _cellStates);
  _forgetGate = new LSTMGateState(inputSize, outputSize, inputs, _lastCellOutputs, _cellStates);
  _outputGate = new LSTMGateState(inputSize, outputSize, inputs, _lastCellOutputs, _cellStates);
}

LSTMLayerState::~LSTMLayerState() {
  delete[] _cellStates;
  delete[] _lastCellOutputs;
  delete _inputGate;
  delete _forgetGate;
  delete _outputGate;
}

SoftmaxLayer::SoftmaxLayer(int inputSize, int outputSize, float** parameters) {
  _inputSize = inputSize;
  _outputSize = outputSize;

  _inputWeights = *parameters;
  *parameters += inputSize * outputSize;

  _biases = *parameters;
  *parameters += outputSize;
  
//  _inputWeights = new float[inputSize * outputSize];
//  _biases = new float[outputSize];
}

SoftmaxLayer::~SoftmaxLayer() {
  delete[] _inputWeights;
  delete[] _biases;
}

void SoftmaxLayer::feedForward(SoftmaxLayerState* state) {
  ArrayCopy(_biases, state->_outputs, _outputSize);
  AddWeightedInput(state->_inputs, _inputWeights, state->_outputs, _inputSize, _outputSize);

  // Apply softmax activation function.
  float sum = 0.0f;
  for (int i = 0; i < _outputSize; i++) {
    float exponentialOutput = exp(state->_outputs[i]);
    sum += exponentialOutput;
    state->_outputs[i] = exponentialOutput;
  }
  // Normalise to one.
  for (int i = 0; i < _outputSize; i++) {
    state->_outputs[i] /= sum;
  }
}

SoftmaxLayerState::SoftmaxLayerState(int inputSize, int outputSize, float* inputs, float* outputs) {
  _inputSize = inputSize;
  _outputSize = outputSize;
  _inputs = inputs;
  _outputs = outputs;
}

SoftmaxLayerState::~SoftmaxLayerState() {
  // No clean-up to do.
}

LSTMNetwork::LSTMNetwork(int inputSize, int hiddenSize, int outputSize, float* parameters) {
  _inputSize = inputSize;
  _hiddenSize = hiddenSize;
  _outputSize = outputSize;
  _inputs = new float[inputSize];
  _hiddenStates = new float[hiddenSize];
  _outputs = new float[outputSize];
  _hiddenLayer = new LSTMLayer(inputSize, hiddenSize, &parameters);
  _hiddenLayerState = new LSTMLayerState(inputSize, hiddenSize, _inputs, _hiddenStates);
  _outputLayer = new SoftmaxLayer(hiddenSize, outputSize, &parameters);
  _outputLayerState = new SoftmaxLayerState(hiddenSize, outputSize, _hiddenStates, _outputs);
  _loadedSuccessfully = (*parameters == -100.0f);  
}

LSTMNetwork::~LSTMNetwork() {
  delete[] _inputs;
  delete[] _hiddenStates;
  delete[] _outputs;
  delete _hiddenLayer;
  delete _hiddenLayerState;
  delete _outputLayer;
  delete _outputLayerState;
}

int LSTMNetwork::inputSize() {
  return _inputSize;
}

int LSTMNetwork::outputSize() {
  return _outputSize;
}

float* LSTMNetwork::inputs() {
  return _inputs;
}

float* LSTMNetwork::outputs() {
  return _outputs;
}

bool LSTMNetwork::hasLoadedSuccessfully() {
  return _loadedSuccessfully;
}

void LSTMNetwork::feedForward() {
  _hiddenLayer->feedForward(_hiddenLayerState);
  _outputLayer->feedForward(_outputLayerState); 
}



